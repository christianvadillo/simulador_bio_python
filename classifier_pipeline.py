# -*- coding: utf-8 -*-
"""classifier_pipeline.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TM1uclLBJbvuvsxFLUzCIqeJYlckLqmr
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

da = pd.read_csv('/content/drive/My Drive/Documento_Tesis_Revision/simulador_python/df_da_3600_07_Jul_2020_19_26_38.csv', index_col=0, parse_dates=True)
mec = pd.read_csv('/content/drive/My Drive/Documento_Tesis_Revision/simulador_python/df_mec_3600_07_Jul_2020_19_26_38.csv', index_col=0, parse_dates=True)

print(da['labels'].value_counts())
print(mec['labels'].value_counts())

sns.countplot(da['labels'])

sns.countplot(mec['labels'])

sns.distplot(da.loc[da['labels'] == 0, 'da_agv_out'], kde=False, color='g')
sns.distplot(da.loc[da['labels'] == 1, 'da_agv_out'], kde=False, color='red')

from collections import Counter
from numpy import mean
from numpy import std

from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.pipeline import Pipeline
from sklearn.model_selection import RepeatedStratifiedKFold, cross_val_score
from sklearn.metrics import classification_report, confusion_matrix, auc, precision_recall_curve, make_scorer
from sklearn.dummy import DummyClassifier

from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier, BaggingClassifier

def load_dataset(full_path):
  data = pd.read_csv(full_path)
  # data = data.sample(frac=0.7, random_state=1)
  X, y = data.iloc[:, 1:-1].values, data.iloc[:, -1].values
  return X, y

def pr_auc(y_true, probas_pred):
  """Calculate precision-recall area under curve"""
  p, r, _ = precision_recall_curve(y_true, probas_pred)
 
  # calculate area under curve
  return auc(r, p)

def evaluate_model(model, X, y):
  """ Evaluate the model using Stratified KFold """
  cv = RepeatedStratifiedKFold(n_splits=5, n_repeats=3, random_state=1)
  metric = make_scorer(pr_auc, needs_proba=True)
  # metric = 'recall'
  scores = cross_val_score(model, X, y, scoring=metric, cv=cv, n_jobs=-1)
  
  return scores

da = pd.read_csv('/content/drive/My Drive/Documento_Tesis_Revision/simulador_python/df_da_3600_07_Jul_2020_19_26_38.csv', index_col=0, parse_dates=True)
mec = pd.read_csv('/content/drive/My Drive/Documento_Tesis_Revision/simulador_python/df_mec_3600_07_Jul_2020_19_26_38.csv', index_col=0, parse_dates=True)
X, y = load_dataset("/content/drive/My Drive/Documento_Tesis_Revision/simulador_python/df_mec_3600_07_Jul_2020_19_26_38.csv")

# Summarize the class distribution
counter = Counter(y)
# print(counter)
for k, v in counter.items():
  per = v / len(y) * 100
  print(f'Class = {k}, Count = {v}, Percentage = {per}')

"""## Evaluate Machine Learning Algorithms

* Decision Tree (CART)
* k-Nearest Neighbors (KNN)
* Bagged Decision Trees (BAG)
* Random Forest (RF)
* Extra Trees (ET)
"""



def get_models():
  """ Models to test """
  knn_pipline = Pipeline(steps=[('s', StandardScaler()), 
                                ('KNN', KNeighborsClassifier())])
  models = [
            knn_pipline,  # KNN
            DecisionTreeClassifier(),
            BaggingClassifier(),
            RandomForestClassifier(),
            ExtraTreesClassifier(),
  ]
  names = [
           'KNN',
           'DT-CART',
           'Bagging',
           'RF',
           'ET'
  ]

  return models, names

models, names = get_models()
results = []

for i, model in enumerate(models):
  scores = evaluate_model(model, X, y)
  results.append(scores)
  print(f'{names[i]}: mean = {mean(scores)} - std = {std(scores)}')

plt.boxplot(results, labels=names, showmeans=True)
plt.show()

from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,
                                                    random_state=0)
# pipe = Pipeline([('scaler', StandardScaler()), ('svc', SVC())])
# # The pipeline can be used as any other estimator
# # and avoids leaking the test set into the train set
# pipe.fit(X_train, y_train)
# Pipeline(steps=[('scaler', StandardScaler()), ('svc', SVC())])
# pipe.score(X_test, y_test)

# # Make predictions

pipeline = Pipeline(steps=[('s', StandardScaler()), ('KNN', KNeighborsClassifier())])
pipeline.fit(X_train, y_train)

scores = evaluate_model(pipeline, X_test, y_test)

print(scores)
# for row in X_test:
#   y_pred = pipeline.predict_proba(row.reshape(1, -1))
#   print(f"Prob of be 0={y_pred[[0], [0]]}, Prob of be 1={y_pred[[0], [1]]}")

import numpy as np
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn.model_selection import learning_curve
from sklearn.model_selection import ShuffleSplit


def plot_learning_curve(estimator, title, X, y, axes=None, ylim=None, cv=None,
                        n_jobs=None, train_sizes=np.linspace(.1, 1.0, 10)):
    """
    Generate 3 plots: the test and training learning curve, the training
    samples vs fit times curve, the fit times vs score curve.

    Parameters
    ----------
    estimator : object type that implements the "fit" and "predict" methods
        An object of that type which is cloned for each validation.

    title : string
        Title for the chart.

    X : array-like, shape (n_samples, n_features)
        Training vector, where n_samples is the number of samples and
        n_features is the number of features.

    y : array-like, shape (n_samples) or (n_samples, n_features), optional
        Target relative to X for classification or regression;
        None for unsupervised learning.

    axes : array of 3 axes, optional (default=None)
        Axes to use for plotting the curves.

    ylim : tuple, shape (ymin, ymax), optional
        Defines minimum and maximum yvalues plotted.

    cv : int, cross-validation generator or an iterable, optional
        Determines the cross-validation splitting strategy.
        Possible inputs for cv are:

          - None, to use the default 5-fold cross-validation,
          - integer, to specify the number of folds.
          - :term:`CV splitter`,
          - An iterable yielding (train, test) splits as arrays of indices.

        For integer/None inputs, if ``y`` is binary or multiclass,
        :class:`StratifiedKFold` used. If the estimator is not a classifier
        or if ``y`` is neither binary nor multiclass, :class:`KFold` is used.

        Refer :ref:`User Guide <cross_validation>` for the various
        cross-validators that can be used here.

    n_jobs : int or None, optional (default=None)
        Number of jobs to run in parallel.
        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.
        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`
        for more details.

    train_sizes : array-like, shape (n_ticks,), dtype float or int
        Relative or absolute numbers of training examples that will be used to
        generate the learning curve. If the dtype is float, it is regarded as a
        fraction of the maximum size of the training set (that is determined
        by the selected validation method), i.e. it has to be within (0, 1].
        Otherwise it is interpreted as absolute sizes of the training sets.
        Note that for classification the number of samples usually have to
        be big enough to contain at least one sample from each class.
        (default: np.linspace(0.1, 1.0, 5))
    """
    if axes is None:
        _, axes = plt.subplots(1, 3, figsize=(20, 5))

    axes[0].set_title(title)
    if ylim is not None:
        axes[0].set_ylim(*ylim)
    axes[0].set_xlabel("Training examples")
    axes[0].set_ylabel("Score")

    train_sizes, train_scores, test_scores, fit_times, _ = \
        learning_curve(estimator, X, y, cv=cv, n_jobs=n_jobs,
                       train_sizes=train_sizes,
                       return_times=True)
    train_scores_mean = np.mean(train_scores, axis=1)
    train_scores_std = np.std(train_scores, axis=1)
    test_scores_mean = np.mean(test_scores, axis=1)
    test_scores_std = np.std(test_scores, axis=1)
    fit_times_mean = np.mean(fit_times, axis=1)
    fit_times_std = np.std(fit_times, axis=1)

    # Plot learning curve
    axes[0].grid()
    axes[0].fill_between(train_sizes, train_scores_mean - train_scores_std,
                         train_scores_mean + train_scores_std, alpha=0.1,
                         color="r")
    axes[0].fill_between(train_sizes, test_scores_mean - test_scores_std,
                         test_scores_mean + test_scores_std, alpha=0.1,
                         color="g")
    axes[0].plot(train_sizes, train_scores_mean, 'o-', color="r",
                 label="Training score")
    axes[0].plot(train_sizes, test_scores_mean, 'o-', color="g",
                 label="Cross-validation score")
    axes[0].legend(loc="best")

    # Plot n_samples vs fit_times
    axes[1].grid()
    axes[1].plot(train_sizes, fit_times_mean, 'o-')
    axes[1].fill_between(train_sizes, fit_times_mean - fit_times_std,
                         fit_times_mean + fit_times_std, alpha=0.1)
    axes[1].set_xlabel("Training examples")
    axes[1].set_ylabel("fit_times")
    axes[1].set_title("Scalability of the model")

    # Plot fit_time vs score
    axes[2].grid()
    axes[2].plot(fit_times_mean, test_scores_mean, 'o-')
    axes[2].fill_between(fit_times_mean, test_scores_mean - test_scores_std,
                         test_scores_mean + test_scores_std, alpha=0.1)
    axes[2].set_xlabel("fit_times")
    axes[2].set_ylabel("Score")
    axes[2].set_title("Performance of the model")

    return plt

cv = RepeatedStratifiedKFold(n_splits=5, n_repeats=3, random_state=0)
fig, axes = plt.subplots(3, 4, figsize=(15, 13))

title = "Learning Curves (Naive Bayes)"
# Cross validation with 100 iterations to get smoother mean test and train
# score curves, each time with 20% data randomly selected as a validation set.
# cv = ShuffleSplit(n_splits=100, test_size=0.4, random_state=0)

pipeline_gnb = Pipeline(steps=[('s', StandardScaler()),
                               ('KNN', KNeighborsClassifier())])
# estimator = GaussianNB()
plot_learning_curve(pipeline_gnb, title, X, y, axes=axes[:, 0], ylim=(0.7, 1.01),
                    cv=cv, n_jobs=-1)


title = r"Learning Curves (RF)"
# cv = ShuffleSplit(n_splits=100, test_size=0.4, random_state=0)

pipeline_rf = Pipeline(steps=[('s', StandardScaler()),
                               ('rf', RandomForestClassifier(n_estimators=100, 
                                                              max_depth=5000,
                                                             max_samples=0.4))])
# estimator = RandomForestClassifier(n_estimators=150, max_depth=100, )
plot_learning_curve(pipeline_rf, title, X, y, axes=axes[:, 1], ylim=(0.7, 1.01),
                    cv=cv, n_jobs=-1)

title = r"Learning Curves (LR)"

pipeline_lr = Pipeline(steps=[('s', StandardScaler()),
                               ('lr', LogisticRegression())])
# estimator = LogisticRegression()
plot_learning_curve(pipeline_lr, title, X, y, axes=axes[:, 2], ylim=(0.7, 1.01),
                    cv=cv, n_jobs=-1)


title = r"Learning Curves (SVM, Sigmoid)"
# SVC is more expensive so we do a lower number of CV iterations:

pipeline_svc = Pipeline(steps=[('s', StandardScaler()),
                               ('svc', SVC(kernel='sigmoid', 
                                           gamma=0.01, 
                                           coef0=0.01,))])
# estimator = SVC(kernel='sigmoid', gamma=0.01, coef0=0.01,)
plot_learning_curve(pipeline_svc, title, X, y, axes=axes[:, 3], ylim=(0.7, 1.01),
                    cv=cv, n_jobs=-1)


plt.show()

"""## PCA - Feature reduction"""

from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

pca = PCA(2)
reduced_X = pca.fit_transform(X_train)

plt.figure(figsize=(14,8))
plt.scatter(reduced_X[:, 0], reduced_X[:, 1], c=y_train, s=30, cmap='viridis', alpha=0.3)

pca.explained_variance_ratio_.sum()

y

"""# Random Forest"""

from sklearn.svm import SVC
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,
                                                    random_state=0)

# pipe = Pipeline([('scaler', StandardScaler()), ('svc', SVC())])
# # The pipeline can be used as any other estimator
# # and avoids leaking the test set into the train set
# pipe.fit(X_train, y_train)
# Pipeline(steps=[('scaler', StandardScaler()), ('svc', SVC())])
# pipe.score(X_test, y_test)

# # Make predictions

pipeline = Pipeline(steps=[('s', StandardScaler()), 
                           ('RF', RandomForestClassifier(n_estimators=100, 
                                                        max_depth=5000,
                                                        max_samples=0.4))])
pipeline.fit(X_train, y_train)


scores = evaluate_model(pipeline, X_test, y_test)
print(scores)
# for row in X_test:
#   y_pred = pipeline.predict_proba(row.reshape(1, -1))
#   print(f"Prob of be 0={y_pred[[0], [0]]}, Prob of be 1={y_pred[[0], [1]]}")

print(classification_report(y_test, pipeline.predict(X_test)))
print(confusion_matrix(y_test, pipeline.predict(X_test)))

"""# Save the model"""

# from joblib import dump, load
# path = '/content/drive/My Drive/Documento_Tesis_Revision/simulador_python/models'
# dump(pipeline, path + '/mec_rf_model_7_jul.joblib')

# !ls